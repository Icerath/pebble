fn ret_false(evals: &int) -> bool {
    *evals += 1;
    false
}

fn ret_true(evals: &int) -> bool {
    *evals += 1;
    true
}

fn main() {
    let evals = 0;
    assert !(ret_false(&evals) and ret_false(&evals));
    assert evals == 1;
    assert !(ret_false(&evals) and ret_true(&evals));
    assert evals == 2;
    assert !(ret_true(&evals) and ret_false(&evals));
    assert evals == 4;
    assert ret_true(&evals) and ret_true(&evals);
    assert evals == 6;

    let evals = 0;
    assert !(ret_false(&evals) or ret_false(&evals));
    assert evals == 2;
    assert ret_false(&evals) or ret_true(&evals);
    assert evals == 4;
    assert ret_true(&evals) or ret_false(&evals);
    assert evals == 5;
    assert ret_true(&evals) or ret_true(&evals);
    assert evals == 6;

}

