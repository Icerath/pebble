fn printstr(str: str) { unreachable }
fn len<T>(arr: &[T]) -> int { unreachable }
fn push<T>(arr: &[T], value: T) { unreachable }
fn pop<T>(arr: &[T]) -> T { unreachable }
fn __strjoin(arr: [str]) -> str { unreachable }

impl str {
    fn len(self: str) -> int { unreachable }
    fn find(self: str, needle: str) -> int { unreachable }
    fn rfind(self: str, needle: str) -> int { unreachable }
}

impl int {
    fn chr(self: int) -> char { unreachable }
}

impl char {
    fn ord(self: char) -> int { unreachable }
}

fn print<T>(val: T) {
    printstr("${val}")
}

fn println<T>(val: T) {
    printstr("${val}\n")
}

impl<T> [T] {
    fn push(self: &[T], val: T) {
        push(self, val)
    }
}

impl [str] {
    fn join(self: [str], seperator: str) -> str {
        let arr: [str] = [];
        for i in self {
            arr.push(i);
            arr.push(seperator);
        }
        if len(&self) != 0 {
            pop(&arr);
        }
        __strjoin(arr)
    }
}